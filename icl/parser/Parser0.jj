PARSER_BEGIN(Parser)

package parser;
import ast.*;
import ast.arithmetic.*;
import ast.relational.*;
import ast.imperative.*;
import ast.logical.*;
import utils.Pair;
import java.util.LinkedList;
import java.util.List;

/** ID lister.*/
public class Parser {


}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"

}

TOKEN :
{
  < BOOL: ("true"|"false") >
  |
  < LET: "let" >
  |
  < MUT: "mut" >
  |
  < Num: (["0"-"9"]) + >
  |
  < PV: ";" >
  |
  < NEW: "new" >
  |
  < WHILE: "while" >
  |
  < IF: "if" >
  |
  < REF: ":=" >
  |
  < OR: "||" >
  |
  < AND: "&&" >
  |
  < NOT: "~" >
  |
  < EQUAL: "==" >
  |
  < NOTEQUAL: "~=" >
  |
  < BIG: ">" >
  |
  < BIGEQUAL: ">=" >
  |
  < SMALLEQUAL: "<=" >
  |
  < SMALL: "<" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < RBR: "{" >
  |
  < LBR: "}" >
  |
  < EQ: "=" >
  |
  < TERM: ";;" >
  |
  < EXCL: "!" >
  |
  < PRINTLN: "println" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}

ASTNode Start():
{ ASTNode t;}
{
   t = Sep() <TERM>
   { return t; }
}

ASTNode Sep():
{ASTNode t1, t2; }
{ // left-associative: Exp() ( < SEMICOLON > Exp() )*
  t1 = Assign()
  	[ <PV> t2 = Sep()
  		{ t1 = new ASTSep(t1,t2);}
 	] // right associative tree
  {
    return t1;
  }
}

ASTNode Assign() :
{ ASTNode t1, t2; }
{ t1 = Conj()
  	[ < PV > t2 = Assign()
  		{ t1 = new ASTAssign(t1,t2);}
 	]
  { return t1; }
}


ASTNode Conj() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Disj() ( ( op=<OR> ) t2=Disj()
                 { t1 = new ASTOr(t1,t2);} ) *
     { return t1; }
}

ASTNode Disj() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Logic() ( ( op=<AND> ) t2=Logic()
                 { t1 = new ASTAnd(t1,t2);} ) *
     { return t1; }
}


ASTNode Logic() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Exp() ( ( op=<EQUAL> | op=<NOTEQUAL> | op=<BIG> | op=<SMALL> | op=<BIGEQUAL> | op=<SMALLEQUAL> ) t2=Exp()
  { switch(op.kind) {
     case EQUAL:
         t1 = new ASTEqual(t1,t2);
         break;
            case NOTEQUAL:
             t1 = new ASTNotEqual(t1,t2);
             break;
                case BIG:
                t1 = new ASTBigger(t1,t2);
                break;
                    case SMALL:
                    t1 = new ASTSmaller(t1,t2);
                    break;
                        case BIGEQUAL:
                            t1 = new ASTBiggerEqual(t1,t2);
                           break;
                                case SMALLEQUAL:
                                    t1 = new ASTSmallerEqual(t1,t2);
                                    break;
       default:
     }
} ) ?
     { return t1; }
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
        t1 = new ASTPlus(t1,t2);
  else  t1 = new ASTSub(t1,t2);
}
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Unary() ( ( op=<TIMES> | op=<DIV> ) t2 = Unary()
 		 { if (op.kind == TIMES)
        t1 = new ASTMult(t1,t2);
    else  t1 = new ASTDiv(t1,t2);
     }
		)?
     { return t1; } 
}

ASTNode Unary() :
{ ASTNode t; }
{ (
    <MINUS> t=Fact() { t = new ASTNeg(t); }
	|
	<NOT> t=Fact() { t = new ASTNot(t);}
	|
    <EXCL> t=Fact() { t = new ASTDeref(t); }

     ){ return t; }
}

ASTNode Fact() :
{ Token n; 
ASTNode t, t2, t3;
List<Pair> l;}
{ (
    n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   |
    n=<Id> { t = new ASTId(n.image); }
   |
    n=<BOOL> { return new ASTBool(Boolean.parseBoolean(n.image));}
   |
   <LPAR> t = Sep() <RPAR>
   |
   <RBR> { l = new LinkedList<>(); }
                ( <LET> n=<Id> <EQ> t=Sep() <PV> { l.add(new Pair(n.image,t)); } )+
                t=Sep() <LBR>
                {return new ASTDef(l,t);}
   |
    <RBR> { l = new LinkedList<>(); }
                      ( <LET> <MUT> n=<Id> <EQ> t=Sep() <PV> { t1=new ASTNew(t); l.add(new Pair(n.image,t1)); } )+
                      t=Sep() <LBR>
                      {return new ASTDef(l,t);}
   |
   <NEW> <LPAR > t = Sep() <RPAR> { return new ASTNew(t); }
   |
   <NEW> t = Unary() { return new ASTNew(t); }
   |
   <WHILE> t = Sep() <RBR> t2 = Sep() <LBR> { return new ASTWhile(t,t2);}
   |
   <IF> t = Sep() <RBR>t2 = Sep()<LBR> <RBR>t3 = Sep()<LBR> { return new ASTIf(t,t2,t3); }
   |
   <PRINTLN> t = Assign() { return new ASTPrintln(t); }

       ){ return t; }
}


















