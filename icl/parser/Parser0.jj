PARSER_BEGIN(Parser)

package parser;
import ast.*;
import ast.arithmetic.*;
import ast.relational.*;
import ast.imperative.*;
import ast.logical.*;
import types.*;
import utils.values.*;
import utils.Pair;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;


/** ID lister.*/
public class Parser {


}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"

}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < RBR: "{" >
  |
  < LBR: "}" >
  |
  < END : "end" >
  |
  < SEMICOLON: ";" >
  |
  < COMMA: "," >
  |
  < ARROW: "->" >
  |
  < COLON: ":" >
  |
  < TERM: ";;" >
  |
  < BOOL: ("true"|"false") >
  |
  < OR: "||" >
  |
  < AND: "&&" >
  |
  < NOT: "~" >
  |
  < EQUAL: "==" >
  |
  < NOTEQUAL: "~=" >
  |
  < BIG: ">" >
  |
  < BIGEQUAL: ">=" >
  |
  < SMALLEQUAL: "<=" >
  |
  < SMALL: "<" >
  |
  < EQ: "=" >
  |
  < ASSIGN: ":=" >
  |
  < EXCL: "!" >
  |
  < LET: "let" >
  |
  < MUT: "mut" >
  |
  < NEW: "new" >
  |
  < WHILE: "while" >
  |
  < IF: "if" >
  |
  < PRINTLN: "println" >
  |
  < FUN: "fun" >
  |
  < INTTYPE: "Int" >
  |
  < BOOLTYPE: "Bool" >
  |
  < REFTYPE: "Ref" >
  |
  < FUNTYPE: "Fun" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}


ASTNode Start():
{ ASTNode t;}
{
   t = Sep() <TERM>
   { return t; }
}

ASTNode Sep():
{ASTNode t1, t2; }
{
  t1 = Assign()
  	( <SEMICOLON>  t2 = Assign()
  		{ t1 = new ASTSep(t1,t2);}
 	) *
  {return t1;}
}

ASTNode Assign() :
{ ASTNode t1, t2; }
{
 t1 = Conj()
  	( <ASSIGN>  t2 = Conj()
  		{ t1 = new ASTAssign(t1,t2);}
 	) *
  { return t1; }
}


ASTNode Conj() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Disj() ( ( op=<OR> ) t2=Disj()
                 { t1 = new ASTOr(t1,t2);} ) *
     { return t1; }
}

ASTNode Disj() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Logic() ( ( op=<AND> ) t2=Logic()
                 { t1 = new ASTAnd(t1,t2);} ) *
     { return t1; }
}


ASTNode Logic() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Exp() ( ( op=<EQUAL> | op=<NOTEQUAL> | op=<BIG> | op=<SMALL> | op=<BIGEQUAL> | op=<SMALLEQUAL> ) t2=Exp()
  { switch(op.kind) {
     case EQUAL:
         t1 = new ASTEqual(t1,t2);
         break;
            case NOTEQUAL:
             t1 = new ASTNotEqual(t1,t2);
             break;
                case BIG:
                t1 = new ASTBigger(t1,t2);
                break;
                    case SMALL:
                    t1 = new ASTSmaller(t1,t2);
                    break;
                        case BIGEQUAL:
                            t1 = new ASTBiggerEqual(t1,t2);
                           break;
                                case SMALLEQUAL:
                                    t1 = new ASTSmallerEqual(t1,t2);
                                    break;
       default:
     }
} ) ?
     { return t1; }
}


IType Type():
{ IType t1; List<IType> l = new ArrayList(); }
{
	<INTTYPE>
	{
		return new TypeInt();
	}
	|
	<BOOLTYPE>
	{
		return new TypeBool();
	}
	|
	<REFTYPE> <LPAR> t1 = Type() <RPAR>
	{
		return new TypeRef(t1);
	}
	|
	<FUNTYPE> <LPAR> t1 = Type() (<COMMA> { l.add(t1); } t1 = Type())* <RPAR>
	{
		return new TypeFun(l, t1);
	}
}

ASTNode Call() :
{ ASTNode e; List<ASTNode> l = null; }
{
	e = Fact() ( <LPAR> l = ExpList() <RPAR> { e = new ASTCall(l, e); } )*
	{
		return e;
	}
}

List<ASTNode> ExpList() :
{ ASTNode e1, e2; List<ASTNode> l = new ArrayList(); }
{
	(e1 = Sep() { l.add(e1); } (<COMMA> e2 = Sep() { l.add(e2); } )*)?
	{
		return l;
	}
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
        t1 = new ASTPlus(t1,t2);
  else  t1 = new ASTSub(t1,t2);
}
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Fact()
 		 { if (op.kind == TIMES)
        t1 = new ASTMult(t1,t2);
    else  t1 = new ASTDiv(t1,t2);
     }
		)*
     { return t1; } 
}


ASTNode Fact() :
{ Token tk, tk2;
ASTNode n, n2, n3;
IType t1, t2;
List<Pair> listPairs = new LinkedList();
List<ASTArg> listArgs = new LinkedList();
boolean b = false;}
{ (
    tk=<Num> { n = new ASTNum(Integer.parseInt(tk.image)); }
   |
   <PRINTLN> n = Fact() { n = new ASTPrintln(n); }
   |
    tk=<Id> { n = new ASTId(tk.image); }
   |
    tk=<BOOL> { n = new ASTBool(Boolean.parseBoolean(tk.image));}
   |
   <MINUS> n=Fact() { n = new ASTNeg(n); }
   	|
   	<NOT> n=Fact() { n = new ASTNot(n);}
   	|
   <EXCL> n=Fact() { n = new ASTDeref(n); }
    |
   <LPAR> n = Sep() <RPAR>
   |
   <RBR> { listPairs = new LinkedList<>(); }
                      ( <LET> (<MUT> { b=true; } )? tk=<Id> <EQ> n=Assign() <SEMICOLON>{ if(b){ n=new ASTNew(n); b=false;}
                                                                                listPairs.add(new Pair(tk.image,n)); } )+
                      n=Sep() <LBR>
                      {n = new ASTDef(listPairs,n);}
    |
   <NEW> n = Fact() { n = new ASTNew(n); }
   |
   <WHILE> n = Sep() <RBR> n2 = Sep() <LBR> { n = new ASTWhile(n,n2);}
   |
   <IF> n = Sep() <RBR> n2 = Sep()<LBR> <RBR> n3 = Sep()<LBR> { n = new ASTIf(n,n2,n3); }

       ){ return n; }
    |
    <FUN> (tk = <Id> <COLON> t1 = Type() { listArgs.add(new ASTArg(tk.image, t1)); } ( <COMMA> tk2 = <Id> <COLON> t2 = Type() {
            listArgs.add(new ASTArg(tk2.image, t2)); } )* )? < ARROW > n = Sep()< END >
               {
                   return new ASTFun(n, listArgs);
               }
}


















